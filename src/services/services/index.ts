// Import necessary types and functions
import {
  BookServiceRequest,
  BookingActionRequest,
  CreateServiceRequest,
  CreateServiceResponse,
  GetBookedServicesRequest,
  GetBookedServicesResponse,
  GetServicesRequest,
  GetServicesResponse,
} from "@/types/services/service";
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { getSession } from "next-auth/react";

// Helper function to create a POST request configuration
const postRequest = (url: string, details: unknown) => ({
  url,
  method: "POST",
  body: details,
});

// Helper function to create a GET request configuration
const getRequest = (url: string) => ({
  url,
});
const url = "https://bms-api.up.railway.app/api/booking-mgt/v1";
const url3 =
  "https://booking-management-production.up.railway.app/api/booking-mgt/v1";
// Create the service API using createApi from Redux Toolkit
export const service = createApi({
  reducerPath: "service",
  tagTypes: ["Service"], // Tags for cache invalidation
  baseQuery: fetchBaseQuery({
    baseUrl: url, // Base URL for API requests
    prepareHeaders: async (headers) => {
      // By default, if we have a token in next auth session, let's use that for authenticated requests
      const session = await getSession();
      const token = session?.user.jwtToken;

      if (token) {
        headers.set("authorization", `Bearer ${token}`);
      }
      return headers;
    },
  }),
  endpoints: (builder) => ({
    // Define API endpoints for different operations (mutations and queries)
    createService: builder.mutation<
      CreateServiceResponse,
      CreateServiceRequest
    >({
      query: (credentials) => postRequest("/service-offering", credentials),
      invalidatesTags: ["Service"], // Invalidates cache for the "Service" tag after this mutation
    }),
    getBookingsforAService: builder.query({
      query: ({ id, page, size }) =>
        getRequest(`/booking/${id}/${page}/${size}`),

      providesTags: ["Service"],
    }),
    getServiceOfferingById: builder.query({
      query: (id) => getRequest(`/service-offering/${id}`),
    }),
    getServices: builder.query<GetServicesResponse, GetServicesRequest>({
      query: (credentials) =>
        getRequest(`/service-offering/${credentials.page}/${credentials.size}`),
      providesTags: ["Service"], // Stores the response in cache with the "Service" tag for reuse
    }),
    getServicesOfBusiness: builder.query<GetServicesResponse, any>({
      query: ({ userId, page, size }) =>
        getRequest(`/service-offering/business/${userId}/${page}/${size}`),
      providesTags: ["Service"], // Stores the response in cache with the "Service" tag for reuse
    }),
    getBookedServices: builder.query<
      GetBookedServicesResponse,
      GetBookedServicesRequest
    >({
      query: (credentials) =>
        getRequest(
          `/service-offering/${credentials.userEmail}/${credentials.page}/${credentials.size}`
        ),
      providesTags: ["Service"], // Stores the response in cache with the "Service" tag for reuse
    }),
    bookService: builder.mutation<CreateServiceResponse, BookServiceRequest>({
      query: (credentials) =>
        postRequest(`/service-offering/book/${credentials.serviceId}`, ""),
      invalidatesTags: ["Service"], // Invalidates cache for the "Service" tag after this mutation
    }),
    confirmBooking: builder.mutation<
      CreateServiceResponse,
      BookingActionRequest
    >({
      query: (credentials) =>
        postRequest(
          `/service-offering/accept/${credentials.serviceId}/${credentials.userEmail}`,
          ""
        ),
      invalidatesTags: ["Service"], // Invalidates cache for the "Service" tag after this mutation
    }),
    cancelBooking: builder.mutation<
      CreateServiceResponse,
      BookingActionRequest
    >({
      query: (credentials) =>
        postRequest(
          `/service-offering/cancel/${credentials.serviceId}/${credentials.userEmail}`,
          ""
        ),
      invalidatesTags: ["Service"], // Invalidates cache for the "Service" tag after this mutation
    }),
  }),
});

// Export hooks generated by the service API for easy use in components
export const {
  useCreateServiceMutation,
  useGetServicesQuery,
  useBookServiceMutation,
  useCancelBookingMutation,
  useConfirmBookingMutation,
  useGetBookedServicesQuery,
  useGetBookingsforAServiceQuery,
  useGetServiceOfferingByIdQuery,
  useGetServicesOfBusinessQuery,
} = service;
